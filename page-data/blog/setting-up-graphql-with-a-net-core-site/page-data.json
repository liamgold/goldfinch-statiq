{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/setting-up-graphql-with-a-net-core-site/","result":{"data":{"kontentItemBlogDetail":{"elements":{"url_slug":{"value":"setting-up-graphql-with-a-net-core-site"},"base__title":{"value":"Setting up GraphQL with a .NET Core site"},"base__teaser_image":{"value":[{"url":"https://assets-us-01.kc-usercontent.com:443/1bb6bba8-9f04-4be8-88c3-46cbb47bbc97/40a5d7d8-715f-4f6d-a53e-c813e9b367f5/GraphiQL.PNG"}]},"seo__meta_title":{"value":"Setting up GraphQL with .NET Core"},"seo__meta_description":{"value":"See how easy it is to set up a basic GraphQL API for a .NET Core website"},"seo__canonical_url":{"value":""},"body_copy":{"value":"<p>With growing interest in websites being built using a headless CMS, the UI team at <a href=\"https://www.netconstruct.com/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">NetConstruct</a> have become very familiar with GraphQL APIs and the benefits it brings over traditional REST APIs. &nbsp;Many headless CMS providers offer GraphQL APIs or static site generator plugins which open up the use of GraphQL for data retrieval.</p>\n<p>One of the main attractions of using GraphQL is the ability to specify fields that need to be returned when making API calls. &nbsp;This in turn reduces the size of the response payload, removing all of the bloat that would typically be associated with REST API response models.</p>\n<p>UI developers can either use <a href=\"https://graphql.org/learn/introspection/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">introspection queries</a> to find the types and fields they need from the API, or they can use an IDE such as <a href=\"https://github.com/graphql/graphiql\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GraphiQL</a> (we set this up later! üëá) to visually browse the schema itself. &nbsp;Backend developers can define the entire schema, and it is up to the UI developer make the right decisions on what to return from the API.</p>\n<p>No more having to ask and wait for a backend developer to modify the REST API to add or remove fields, the UI developer can just modify the query appropriately üòç can be quite the time saver!</p>\n<p><strong>Setting up GraphQL</strong></p>\n<p>When it comes to implementing GraphQL, you have a wide range of <a href=\"https://graphql.org/code/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">tools</a> to choose from, that spread across many programming languages. &nbsp;You are not locked into a specific tool or programming language, as long as the <a href=\"https://spec.graphql.org/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">GraphQL specification</a> is followed you should be fine.</p>\n<p>The perfect choice for me would be <a href=\"https://github.com/graphql-dotnet/graphql-dotnet\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">graphql-dotnet</a> - I work with .NET on a daily basis and I want to set up GraphQL on <a href=\"https://xperience.io/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Kentico Xperience</a>'s demo website built in .NET Core 3.1.</p>\n<p>The Dancing Goat demo website has a number of classes that we could expose through a GraphQL API (Brewers, Coffees, Cafes, etc.), but to keep this example simple, the initial API will only allow developers to query cafe locations.</p>\n<p>Once the demo website was up and running, I began by installing graphql-dotnet. &nbsp;You only really need to install the middleware NuGet package, <strong>GraphQL.Server.Transports.AspNetCore.SystemTextJson</strong>. &nbsp;The NuGet&nbsp;package already has the appropriate dependencies included to get a GraphQL endpoint up and running. &nbsp;You just need to register and configure it accordingly.</p>\n<p>In the <strong>Startup</strong>&nbsp;class, we first need to register the GraphQL service, and add the GraphQL middleware to the HTTP request pipeline:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"n2db2f639_209a_0110_667e_d94bcbe3a4ef\"></object>\n<p>Now the GraphQL middleware has been set up, we should provide it with a schema as the middleware is now expecting to have an ISchema implementation available. &nbsp;So lets create one!</p>\n<p>This DancingGoatSchema class inherits from Schema, which implements the ISchema interface. &nbsp;All we want to do here, is register a RootQuery which will be the entry point for our GraphQL API.</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"f506c628_17b5_01a2_2c43_2b8e3be9d052\"></object>\n<p>You're probably aware by now I have named the next class we need to create as RootQuery. &nbsp;I have deliberately called it this because GraphQL only allows a single root query object to be registered. &nbsp;&nbsp;You <em>could </em>register multiple GraphQL endpoints, and have a different RootQuery for each, but ideally we want just a single GraphQL endpoint.</p>\n<p>To get around this, you can use <a href=\"https://graphql-dotnet.github.io/docs/getting-started/query-organization/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">Query Organization</a> and register different sub queries below the root query. &nbsp;This is how I have approached the RootQuery class below:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"b2dfcdaf_bfaf_0180_18a7_e93d7a928ade\"></object>\n<p>Our RootQuery contains a field called CafeQuery, this is our first sub query being registered, and we now need to provide a class to represent it.</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"e0ed7e0e_8320_017d_ad95_a5276cf57332\"></object>\n<p>The first piece of functionality I am exposing to the GraphQL endpoint is a field called \"items\", this provides the ability to query and return all of the cafe documents. &nbsp;We are making use of the repository that comes with Dancing Goat out of the box to do any data retrieval from the database.</p>\n<p>The second field called \"item\" returns a single cafe document, which is searched based on a string argument passed in with the GraphQL query. &nbsp;We are once again using the cafe repository, but this time we're filtering the results by finding the first exact match on the cafe name property.</p>\n<p>But...we can't just return the Cafe generated model to the GraphQL API, we need to map the Cafe model to a class that inherits from ObjectGraphType. &nbsp;An example of how to do this is below:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"d5100934_4b1a_013f_84b2_ec5e32c8659d\"></object>\n<p>Hang on! üõë The site will most likely compile now, but we haven't set up any of our new types to be available through .NET Core's dependency injection. &nbsp;We need to head back to the <strong>Startup</strong>&nbsp;class, and add them in:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"e70a49d7_b384_011a_8531_67e3c8006469\"></object>\n<p>You should now be able to query the GraphQL endpoint by POSTing a query to <a href=\"http://localhost:57562/graphql\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:57562/graphql</a>. &nbsp;To call the \"items\" part of our CafeQuery, we can use the following query:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"cfc35d9d_c78a_01fe_e5e1_bcafdfaebc93\"></object>\n<p>And you should get a response with all of the cafes and their names:</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"n93836417_edc9_01fd_50c7_fd05a62fbff5\"></object>\n<p><strong>GraphiQL</strong></p>\n<p>Creating GraphQL queries on your own can be confusing at first if you are not aware of the schema definition, or you are not familiar with how to use <a href=\"https://graphql.org/learn/introspection/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">introspection queries</a>.</p>\n<p>What we can do instead is set up an in-browser IDE such as GraphiQL, this will show you the entire schema in the Explorer tab, and guide you into building up your own queries. &nbsp;It is also great for debugging purposes.</p>\n<p>It's really easy to set up too, first install the NuGet package <strong>GraphQL.Server.Ui.GraphiQL</strong>.</p>\n<p>Once again head over to the <strong>Startup</strong>&nbsp;class, and add the GraphiQL middleware to the HTTP request pipeline.</p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"n1625dca5_9efc_019b_27d8_fddff4002126\"></object>\n<p>After compiling and running the site again, you should be able to access the GraphiQL IDE through <a href=\"http://localhost:57562/ui/graphiql/\" data-new-window=\"true\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:57562/ui/graphiql/</a></p>\n<object type=\"application/kenticocloud\" data-type=\"item\" data-rel=\"component\" data-codename=\"n9b71c0ac_05e8_0169_4440_e231b61f4942\"></object>","modular_content":[{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"// Add using directives\nusing GraphQL.Server;\nusing GraphQL.Types;\n\nnamespace DancingGoat\n{\n    public class Startup\n    {\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n\n            // Register the GraphQL service, and the System.Text.Json deserializer\n            services.AddGraphQL().AddSystemTextJson();\n        }\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)\n        {\n            ...\n\n            // Add the GraphQL middleware to the HTTP request pipeline\n            app.UseGraphQL<ISchema>();\n        }\n    }\n}"}},"system":{"id":"2db2f639-209a-0110-667e-d94bcbe3a4ef","codename":"n2db2f639_209a_0110_667e_d94bcbe3a4ef","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"using DancingGoat.GraphQL.Queries;\nusing GraphQL.Types;\nusing GraphQL.Utilities;\nusing System;\n\nnamespace DancingGoat.GraphQL.Schemas\n{\n    public class DancingGoatSchema : Schema\n    {\n        public DancingGoatSchema(IServiceProvider provider) : base(provider)\n        {\n            Query = provider.GetRequiredService<RootQuery>();\n        }\n    }\n}"}},"system":{"id":"f506c628-17b5-01a2-2c43-2b8e3be9d052","codename":"f506c628_17b5_01a2_2c43_2b8e3be9d052","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"using GraphQL.Types;\n\nnamespace DancingGoat.GraphQL.Queries\n{\n    public class RootQuery : ObjectGraphType\n    {\n        public RootQuery()\n        {\n            // https://graphql-dotnet.github.io/docs/getting-started/query-organization/\n            Field<CafeQuery>(\"cafes\", resolve: context => new { });\n\n            // in the future, we could add more sub query roots, for Brewers, Coffees, etc.\n            // Field<BrewerQuery>(\"brewers\", resolve: context => new { });\n            // etc...\n        }\n    }\n}"}},"system":{"id":"b2dfcdaf-bfaf-0180-18a7-e93d7a928ade","codename":"b2dfcdaf_bfaf_0180_18a7_e93d7a928ade","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"using DancingGoat.GraphQL.GraphTypes;\nusing DancingGoat.Models;\nusing GraphQL;\nusing GraphQL.Types;\nusing System.Linq;\n\nnamespace DancingGoat.GraphQL.Queries\n{\n    public class CafeQuery : ObjectGraphType\n    {\n        public CafeQuery(CafeRepository cafeRepository)\n        {\n            Field<ListGraphType<CafeType>>(\"items\", resolve: context => cafeRepository.GetCompanyCafes(\"/\"));\n            Field<CafeType>(\"item\",\n                arguments: new QueryArguments(\n                    new QueryArgument<StringGraphType>\n                    {\n                        Name = \"name\"\n                    }\n                ),\n                resolve: context => cafeRepository.GetCompanyCafes(\"/\")\n                    .FirstOrDefault(x => x.Name.Equals(context.GetArgument<string>(\"name\")))\n                );\n        }\n    }\n}"}},"system":{"id":"e0ed7e0e-8320-017d-ad95-a5276cf57332","codename":"e0ed7e0e_8320_017d_ad95_a5276cf57332","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"using CMS.DocumentEngine.Types.DancingGoatCore;\nusing GraphQL.Types;\n\nnamespace DancingGoat.GraphQL.GraphTypes\n{\n    public class CafeType : ObjectGraphType<Cafe>\n    {\n        public CafeType()\n        {\n            Field(x => x.Name);\n            Field(x => x.Phone);\n            Field(x => x.Email);\n            Field(x => x.ZIP);\n            Field(x => x.Street);\n            Field(x => x.City);\n            Field(x => x.Country);\n        }\n    }\n}"}},"system":{"id":"d5100934-4b1a-013f-84b2-ec5e32c8659d","codename":"d5100934_4b1a_013f_84b2_ec5e32c8659d","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"// Add using directives\nusing GraphQL.Server;\nusing GraphQL.Types;\n\nnamespace DancingGoat\n{\n    public class Startup\n    {\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n\n            services.AddSingleton<ISchema, DancingGoatSchema>();\n            services.AddSingleton<RootQuery>();\n            services.AddSingleton<CafeQuery>();\n            services.AddSingleton<CafeType>();\n\n            // Register the GraphQL service, and the System.Text.Json deserializer\n            services.AddGraphQL().AddSystemTextJson();\n        }\n    }\n}"}},"system":{"id":"e70a49d7-b384-011a-8531-67e3c8006469","codename":"e70a49d7_b384_011a_8531_67e3c8006469","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"javascript"}]},"code":{"value":"query CafeList {\n  cafes {\n    items {\n      name\n    }\n  }\n}"}},"system":{"id":"cfc35d9d-c78a-01fe-e5e1-bcafdfaebc93","codename":"cfc35d9d_c78a_01fe_e5e1_bcafdfaebc93","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"javascript"}]},"code":{"value":"{\n    \"data\": {\n        \"cafes\": {\n            \"items\": [\n                {\n                    \"name\": \"Boston\"\n                },\n                {\n                    \"name\": \"Chicago\"\n                },\n                {\n                    \"name\": \"Los Angeles\"\n                },\n                {\n                    \"name\": \"New York\"\n                }\n            ]\n        }\n    }\n}"}},"system":{"id":"93836417-edc9-01fd-50c7-fd05a62fbff5","codename":"n93836417_edc9_01fd_50c7_fd05a62fbff5","type":"code_block"}},{"__typename":"kontent_item_code_block","elements":{"language":{"value":[{"codename":"csharp"}]},"code":{"value":"// Add using directives\nusing GraphQL.Server;\nusing GraphQL.Types;\n\nnamespace DancingGoat\n{\n    public class Startup\n    {\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment environment)\n        {\n            ...\n\n            // Add the GraphQL middleware to the HTTP request pipeline\n            app.UseGraphQL<ISchema>();\n\n            // Add the GraphiQL middleware to the HTTP request pipeline\n            app.UseGraphiQLServer();\n        }\n    }\n}"}},"system":{"id":"1625dca5-9efc-019b-27d8-fddff4002126","codename":"n1625dca5_9efc_019b_27d8_fddff4002126","type":"code_block"}},{"__typename":"kontent_item_image","elements":{"image":{"name":"Image","type":"asset","value":[{"description":"Example GraphiQL interface.","height":600,"size":21725,"type":"image/png","name":"GraphiQL.PNG","url":"https://assets-us-01.kc-usercontent.com:443/1bb6bba8-9f04-4be8-88c3-46cbb47bbc97/40a5d7d8-715f-4f6d-a53e-c813e9b367f5/GraphiQL.PNG","width":915}]}},"system":{"id":"9b71c0ac-05e8-0169-4440-e231b61f4942","codename":"n9b71c0ac_05e8_0169_4440_e231b61f4942","type":"image"}}],"links":[]}},"system":{"id":"d252040f-88a1-4d2f-8d24-88dd7ec50de9"}}},"pageContext":{"slug":"setting-up-graphql-with-a-net-core-site"}},"staticQueryHashes":["3897982121"]}